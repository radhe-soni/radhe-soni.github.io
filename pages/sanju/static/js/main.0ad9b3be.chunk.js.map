{"version":3,"sources":["modules/printTable.js","components/simpleBiller/billContainer.js","modules/printUtility.js","components/simpleBiller/printButton.js","components/simpleBiller/grandTotalSticky.js","components/simpleBiller/addDeleteRowButton.js","components/simpleBiller/itemLabel.js","components/simpleBiller/itemField.js","components/simpleBiller/headerInputs.js","components/simpleBiller/dataInputs.js","components/simpleBiller/index.js","App.js","serviceWorker.js","index.js"],"names":["printColumnMap","PrintTable","this","printRows","PrintRows","printColumns","PrintColumns","inputMap","row","rows","push","rowNo","currentRow","getCurrentRow","length","columns","map","columnInfo","itemId","header","name","key","rowIndex","splice","grandTotal","selectedRow","resetFeilds","setCurrentRow","sno","item","document","getElementById","value","rowSeq","PrintColumn","className","DataGroup","props","printTable","id","Component","DataRow","cells","createCellsFor","title","onClick","setFieldsWithSelectedRow","DataCell","generateCellId","HeaderCell","parseFloat","total","reduce","x","y","toFixed","PrintRow","index","itemName","quantity","_rate","sumTotal","Object","entries","forEach","entry","itemValue","itemField","rate","BillContainer","createHeaderCellFor","style","minWidth","createHeaderRow","dataGroup","textAlign","PrintUtility","parentId","listener","grandTotalValue","cellId","getCurrentCellId","cell","highlightChangedElement","innerHTML","updateSubTotal","updateGrandTotal","grandTotalFloating","innerText","element","timeout","oldColor","parentElement","backgroundColor","setTimeout","printHeaderId","type","Date","toLocaleDateString","PrintButton","printTheTable","printHeaderInputs","getElementsByClassName","i","populatePrintHeader","billInfo","customerCopy","cloneNode","billInfoParent","original","sellerDiv","createElement","classList","add","insertBefore","firstChild","customerDiv","appendChild","window","print","onafterprint","console","log","GrandTotalSticky","AddDeleteRowButton","pushRow","table","addNewItem","newPrintRow","size","modifyTableEventListener","deleteLastItem","pop","alert","ItemLabel","label","InputField","state","isItemVar","handleOnInput","bind","event","updatePrintObj","target","pattern","test","RegExp","updatePrintItem","getGrandTotalValue","onInput","inputMode","inputmode","LookupInputField","data","lookup","list","defaultValue","HeaderInputs","DataInputs","getListedItems","SimpleBiller","getDataGroup","setState","handleTableModifyEvent","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TACMA,EAAiB,GACFC,E,WACjB,aAAe,oBACXC,KAAKC,UAAY,IAAIC,EACrBF,KAAKG,aAAe,IAAIC,EACxBJ,KAAKK,SAAW,G,oDAEZC,GACJN,KAAKC,UAAUM,KAAKC,KAAKF,K,oCAEfG,GACVT,KAAKC,UAAUS,WAAaD,I,sCAG5B,OAAOT,KAAKC,UAAUU,kB,6BAGtB,OAAOX,KAAKC,UAAUM,KAAKK,S,4CAG3B,OAAOZ,KAAKG,aAAaU,QAAQC,KAAI,SAAAC,GAAU,OAAI,kBAAC,EAAD,CAC/CC,OAAQD,EAAWC,OAAQC,OAAQF,EAAWG,KAAMC,IAAKJ,EAAWC,c,qCAE7DV,GACX,OAAON,KAAKG,aAAaU,QAAQC,KAAI,SAAAC,GAAU,OAAI,kBAAC,EAAD,CAC/CC,OAAQD,EAAWC,OACnBV,IAAKA,EAAKa,IAAKJ,EAAWC,c,gCAGxBI,GACNpB,KAAKC,UAAUM,KAAKc,OAAOD,EAAU,K,2CAGrC,OAAOpB,KAAKC,UAAUqB,a,+CAMDF,GACrB,IAAMG,EAAcvB,KAAKC,UAAUM,KAAKa,GAGxC,IAAK,IAAMJ,KAFXO,EAAYC,YAAYxB,KAAKK,UAC7BL,KAAKyB,cAAcF,EAAYG,KACVH,EAAa,CAC9B,IAAMI,EAAOC,SAASC,eAAeb,GACjCW,IACAA,EAAKG,MAAQP,EAAYP,Q,sCAXfA,GAAqB,IAAbe,EAAY,uDAAH,EACnC,OAAOf,EAAS,SAAWe,M,KAgBtBC,EACT,WAAYd,EAAMe,EAAWjB,GAAS,oBAClChB,KAAKkB,KAAOA,EACZlB,KAAKiC,UAAYA,EACjBjC,KAAKgB,OAASA,EACdlB,EAAekB,GAAUhB,MAGpBkC,EAAb,uKACc,IAAD,OAGL,OAFAlC,KAAKO,KAAOP,KAAKmC,MAAMC,WAAWnC,UAAUM,KAAKO,KAAI,SAAAR,GAAG,OACpD,kBAAC,EAAD,CAASa,IAAK,UAAYb,EAAIoB,IAAKW,GAAI,UAAY/B,EAAIoB,IAAKU,WAAY,EAAKD,MAAMC,WAAY9B,IAAKA,OAEpG,yBACI+B,GAAIrC,KAAKmC,MAAME,GACfJ,UAAU,mBACTjC,KAAKO,UARtB,GAA+B+B,aAazBC,E,uKACQ,IAAD,OACCC,EAAQxC,KAAKmC,MAAMC,WAAWK,eAAezC,KAAKmC,MAAM7B,KAC9D,OACI,yBACI+B,GAAIrC,KAAKmC,MAAME,GACfJ,UAAU,gCACVS,MAAM,+BACNC,QAAS,kBAAM,EAAKR,MAAMC,WAAWQ,yBAAyB,EAAKT,MAAM7B,IAAIoB,OAC5Ec,O,GATKF,aAchBO,E,uKAEE,IAAMR,EAAKtC,EAAW+C,eAAe9C,KAAKmC,MAAMnB,OAAQhB,KAAKmC,MAAM7B,IAAIoB,KACvE,OACI,yBAAKW,GAAIA,EAAIJ,UAAU,mBAClBjC,KAAKmC,MAAM7B,IAAIN,KAAKmC,MAAMnB,a,GALpBsB,aAUjBS,E,uKAEE,IAAMV,EAAKtC,EAAW+C,eAAe9C,KAAKmC,MAAMnB,QAChD,OACI,yBAAKqB,GAAIA,EAAIJ,UAAU,qBAClBjC,KAAKmC,MAAMlB,Y,GALHqB,aAUZlC,EACT,aAAe,oBACXJ,KAAKa,QAAU,CACX,IAAImB,EAAY,SAAU,QAAS,OACnC,IAAIA,EAAY,YAAa,QAAS,YACtC,IAAIA,EAAY,OAAQ,QAAS,QACjC,IAAIA,EAAY,WAAY,QAAS,YACrC,IAAIA,EAAY,QAAS,QAAS,WAIjC9B,EAAb,WACI,aAAe,oBACXF,KAAKO,KAAO,GACZP,KAAKU,WAAa,EAH1B,4DAMQ,OAAOV,KAAKO,KAAKP,KAAKU,WAAa,KAN3C,uCASqBM,GACb,OAAOA,EAAS,SAAWhB,KAAKU,aAVxC,iCAcQ,OAAOV,KAAKO,KAAKO,KAAI,SAAAR,GAAG,OAAI0C,WAAW1C,EAAI2C,UAAQC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAGC,QAAQ,OAd3F,KAiBaC,EAAb,WACI,WAAYC,GAAQ,oBAChBvD,KAAKwD,SAAW,GAChBxD,KAAKyD,SAAW,EAChBzD,KAAK0D,MAAQ,GACb1D,KAAK2D,SAAW,GAChB3D,KAAK0B,IAAM6B,EAAQ,EAN3B,2DAwBmBvC,GACX,OAAOA,EAAS,SAAWhB,KAAK0B,MAzBxC,uCA2BqBV,GACb,OAAOA,EAAS,SAAWhB,KAAK0B,MA5BxC,kCA8BgBrB,GACRuD,OAAOC,QAAQ7D,MAAM8D,SAAQ,SAAAC,GACzB,IAAM/C,EAAS+C,EAAM,GACfC,EAAYD,EAAM,GAClBE,EAAY5D,EAASW,GACvBiD,IACAA,EAAUnC,MAAQkC,QApClC,4BAUQ,OADAhE,KAAK2D,SAAW3D,KAAKkE,KAAOlE,KAAKyD,SAC1BzD,KAAK2D,SAASN,QAAQ,KAVrC,4BAaQ,OAAOrD,KAAK0B,IAAM,IAb1B,2BAgBQ,IAAII,EAAQkB,WAAWhD,KAAK0D,OAG5B,OAFK5B,IACDA,EAAQ,GACLA,GAnBf,aAqBaA,GACL9B,KAAK0D,MAAQV,WAAWlB,OAtBhC,KCrIqBqC,G,sLAEb,OAAOnE,KAAKmC,MAAMC,WAAWgC,wB,+BAG7B,OACI,yBAAKnC,UAAU,sBACX,yBAAKA,UAAU,gCAAgCI,GAAG,YAC9C,yBAAKJ,UAAU,QAAQI,GAAG,iBACtB,yBAAKJ,UAAU,qBACX,yBAAKA,UAAU,qBAAf,0BAEJ,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WAAWoC,MAAO,CAAEC,SAAU,SAA7C,yBAEA,yBAAKrC,UAAU,WAAWI,GAAG,sBAC7B,yBAAKJ,UAAU,eAAf,gBACA,yBAAKA,UAAU,WAAWI,GAAG,oBAEjC,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,WAAWoC,MAAO,CAAEC,SAAU,SAA7C,4BAEA,yBAAKrC,UAAU,WAAWI,GAAG,yBAC7B,yBAAKJ,UAAU,eAAf,UACA,yBAAKA,UAAU,WAAWI,GAAG,qBAIzC,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,QAAQI,GAAG,aACrBrC,KAAKuE,kBACLvE,KAAKmC,MAAMqC,UACZ,yBAAKvC,UAAU,qBACX,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,mBAAf,eACA,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,kBAAkBI,GAAG,cAApC,YAMhB,yBAAKJ,UAAU,qBACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YAAf,4BAGA,yBAAKA,UAAU,YAAf,oCAGA,yBAAKA,UAAU,YACX,qFAEA,gEAEJ,yBAAKA,UAAU,WAAWoC,MAAO,CAAEI,UAAW,WAA9C,sBAGA,yBAAKxC,UAAU,YAAf,oBAGA,yBAAKA,UAAU,WAAWoC,MAAO,CAAEI,UAAW,WAA9C,uB,GAlEOnC,cCDtBoC,E,0GAEAC,EAAUrE,GAC7B,OACC,yBACC+B,GAAIsC,EAAW,YACf1C,UAAU,mBACT3B,K,wCAKH,OACC,yBAAK2B,UAAU,wB,qCAKhB,OACC,yBAAKA,UAAU,wB,yCAKhB,OAAQ,yBAAKA,UAAU,SACtB,yBAAKA,UAAU,kBACd,yBAAKA,UAAU,mBAAf,eAGA,yBAAKI,GAAG,aAAaJ,UAAU,mBAA/B,S,qCAMmBsB,EAAOqB,EAAUpC,GACtC,OACE,yBACCH,GAAI,UAAYkB,EAChBtB,UAAU,gCACVS,MAAM,+BACNC,QAASiC,GACRpC,K,oCAIgBxB,EAAQE,GAC5B,MAAM,GAAN,OAAUA,K,sCAGYZ,EAAKU,EAAQ6D,GACnC,IAAMC,EAASxE,EAAIyE,iBAAiB/D,GAChCgE,EAAOpD,SAASC,eAAeiD,GACnC9E,KAAKiF,wBAAwBD,GAC7BA,EAAKE,UAAY5E,EAAIU,GACrBhB,KAAKmF,eAAe7E,GACpBN,KAAKoF,iBAAiBP,K,qCAGDvE,GACrB,IAAIwE,EAASxE,EAAIyE,iBAAiB,SAC9BC,EAAOpD,SAASC,eAAeiD,GACnC9E,KAAKiF,wBAAwBD,GAC7BA,EAAKE,UAAY5E,EAAI2C,Q,uCAEE4B,GACvB,IAAMvD,EAAaM,SAASC,eAAe,cACrCwD,EAAqBzD,SAASC,eAAe,sBACnD7B,KAAKiF,wBAAwB3D,GAC7BA,EAAWgE,UAAYT,EACvBQ,EAAmBC,UAAYT,I,8CAGDU,GAAyB,IAAhBC,EAAe,uDAAL,IAC3CC,EAAWF,EAAQG,cAAcrB,MAAMsB,gBAC7CJ,EAAQlB,MAAMsB,gBAAkB,OAChCC,YAAW,kBAAML,EAAQlB,MAAMsB,gBAAkBF,IAAUD,K,0CAIjCD,GAC1B,IAAMM,EAAgBN,EAAQlD,GAAK,QACd,SAAjBkD,EAAQO,KACXlE,SAASC,eAAegE,GAAeP,UAAY,IAAIS,KAAKR,EAAQzD,OAAOkE,qBAG3EpE,SAASC,eAAegE,GAAeP,UAAYC,EAAQzD,U,KAtFzC4C,EACblC,MAAQ,G,ICAKyD,E,4MAEjBC,cAAgB,WAEZ,IADA,IAAMC,EAAoBvE,SAASwE,uBAAuB,sBACjDC,EAAI,EAAGA,EAAIF,EAAkBvF,OAAQyF,IAC1C3B,EAAa4B,oBAAoBH,EAAkBE,IAEvD,IAAME,EAAW3E,SAASC,eAAe,YACnC2E,EAAeD,EAASE,WAAU,GAClCC,EAAiBH,EAASb,cAC1BiB,EAAWD,EAAexB,UAE1B0B,EAAYhF,SAASiF,cAAc,OACzCD,EAAUE,UAAUC,IAAI,OACxBH,EAAUtB,UAAY,cACtBiB,EAASS,aAAaJ,EAAWL,EAASU,YAE1C,IAAMC,EAActF,SAASiF,cAAc,OAC3CK,EAAYJ,UAAUC,IAAI,OAC1BG,EAAY5B,UAAY,gBACxBkB,EAAaQ,aAAaE,EAAaV,EAAaS,YACpDP,EAAeS,YAAYX,GAC3BY,OAAOC,QACPD,OAAOE,cAAa,WAChBC,QAAQC,IAAI,yBACZd,EAAexB,UAAYyB,M,uDAK/B,OACI,6BACI,yBAAK1E,UAAU,oBACX,4BAAQA,UAAU,kBAAkBU,QAAS3C,KAAKkG,eAC9C,0BAAMjE,UAAU,aAAhB,gB,GAlCiBK,aCFpBmF,E,uKAGb,OACI,yBAAKxF,UAAU,0BACX,yBAAKA,UAAU,gBAAf,cACI,yBAAKA,UAAU,cACf,0BAAMA,UAAU,mBACZI,GAAG,sBAAsBrC,KAAKmC,MAAMb,kB,GARdgB,aCEzBoF,G,8DACjB,WAAYvF,GAAQ,IAAD,8BACf,cAAMA,IAGVwF,QAAU,SAACrH,GACP,EAAKsH,MAAMD,QAAQrH,IALJ,EAOnBmB,cAAgB,SAAChB,GACb,EAAKmH,MAAMnG,cAAchB,IARV,EAUnBoH,WAAa,WACT,IAAMC,EAAc,IAAIxE,EAAS,EAAKsE,MAAMG,QAC5C,EAAKJ,QAAQG,GACb,EAAKrG,cAAcqG,EAAYpG,KAC/BoG,EAAYtG,YAAY,EAAKoG,MAAMvH,UACnC,EAAK8B,MAAM6F,4BAfI,EAkBnBC,eAAiB,WACb,IAAM7G,EAAW,EAAKwG,MAAMG,OAAS,EACjC3G,EAAW,GACX,EAAKwG,MAAM3H,UAAUM,KAAK2H,MAC1B,EAAK/F,MAAM6F,2BACX,EAAKJ,MAAMhF,yBAAyBxB,EAAW,IAG/C+G,MAAM,kCAxBV,EAAKP,MAAQzF,EAAMC,WAFJ,E,qDA+Bf,OACI,6BACI,yBAAKH,UAAU,oBACX,4BAAQA,UAAU,kBAAkBU,QAAS3C,KAAK6H,YAC9C,0BAAM5F,UAAU,eAChB,0BAAMA,UAAU,MAAhB,kBAGR,yBAAKA,UAAU,oBACX,4BAAQA,UAAU,kBAAkBU,QAAS3C,KAAKiI,gBAC9C,0BAAMhG,UAAU,iBAChB,0BAAMA,UAAU,MAAhB,2B,GA3CwBK,cCOjC8F,E,uKANP,OACA,0BAAMnG,UAAU,oBAAmB,+BAAQjC,KAAKmC,MAAMkG,Y,GAHtC/F,a,OCAlBgG,E,kDACF,WAAYnG,GAAQ,IAAD,8BACf,cAAMA,IACDoG,MAAQ,GACb,EAAKA,MAAMC,UAAqC,SAAzB,EAAKrG,MAAMqG,UAClC,EAAKvG,UAAY,eACZ,EAAKsG,MAAMC,YACZ,EAAKvG,WAAa,uBAEtB,EAAKwG,cAAgB,EAAKA,cAAcC,KAAnB,gBARN,E,0DAULC,GACN3I,KAAKuI,MAAMC,UACZxI,KAAK4I,eAAeD,EAAME,QAGzBnE,EAAa4B,oBAAoBqC,EAAME,U,qCAGhCtD,GACX,IAAMvE,EAASuE,EAAQlD,GACjB2B,EAAqC,kBAAlBuB,EAAQzD,MAAqByD,EAAQzD,MAAQkB,WAAWuC,EAAQzD,OACnFgH,EAAUvD,EAAQuD,QACpBC,GAAO,EACLnB,EAAQ5H,KAAKmC,MAAMyF,MACnBlH,EAAakH,EAAMjH,gBACtBmI,IACCC,EAAOC,OAAOF,GAASC,KAAK/E,IAE7B+E,GACCrI,EAAWM,GAAUgD,EAErBU,EAAauE,gBAAgBvI,EAAYM,EAAQ4G,EAAMsB,uBAGvD3D,EAAQzD,MAAQpB,EAAWM,K,+BAK/B,OACI,2BAAOiB,UAAWjC,KAAKiC,UACnBI,GAAIrC,KAAKmC,MAAME,GACfyD,KAAM9F,KAAKmC,MAAM2D,KACjBqD,QAASnJ,KAAKyI,cACdW,UAAWpJ,KAAKmC,MAAMkH,UACtBP,QAAS9I,KAAKmC,MAAM2G,QACpBhH,MAAO9B,KAAKuI,MAAMzG,Y,GA/CTQ,aAoDZgH,EAAb,uKAOQ,OAJAtJ,KAAKuI,MAAMgB,KAAO,GACc,mBAArBvJ,KAAKmC,MAAMqH,SAClBxJ,KAAKuI,MAAMgB,KAAOvJ,KAAKmC,MAAMqH,UAG7B,6BACI,2BAAOvH,UAAU,eACbI,GAAIrC,KAAKmC,MAAME,GACfyD,KAAM9F,KAAKmC,MAAM2D,KACjBqD,QAASnJ,KAAKyI,cACdW,UAAWpJ,KAAKmC,MAAMkH,UACtBP,QAAS9I,KAAKmC,MAAM2G,QACpBW,KAAK,YACL3H,MAAO9B,KAAKuI,MAAMzG,QACtB,8BAAUO,GAAG,YAAYqH,aAAa,IAClC,4BAAQ5H,MAAM,IAAd,UAEI9B,KAAKuI,MAAMgB,KAAKzI,KACZ,SAACkD,GAAD,OAAe,4BAAQ7C,IAAK6C,EAAWlC,MAAOkC,aArB1E,GAAsCsE,GA4BvBA,IC/EMqB,E,uKAEb,OACI,6BACI,yBAAK1H,UAAU,OACX,yBAAKA,UAAU,uBACX,kBAAC,EAAD,CAAWoG,MAAM,wBACjB,kBAAC,EAAD,CAAYhG,GAAG,eAAeyD,KAAK,UAEvC,yBAAK7D,UAAU,uBACX,kBAAC,EAAD,CAAWoG,MAAM,uBACjB,kBAAC,EAAD,CAAYhG,GAAG,kBAAkByD,KAAK,aAG9C,yBAAK7D,UAAU,OACX,yBAAKA,UAAU,uBACX,kBAAC,EAAD,CAAWoG,MAAM,gBACjB,kBAAC,EAAD,CAAYhG,GAAG,YAAYyD,KAAK,YAEpC,yBAAK7D,UAAU,uBACX,kBAAC,EAAD,CAAWoG,MAAM,SACjB,kBAAC,EAAD,CAAYhG,GAAG,WAAWyD,KAAK,gB,GArBbxD,aCArBsH,E,uKAGb,OACI,6BACI,yBAAK3H,UAAU,OACX,yBAAKA,UAAU,wBACX,kBAAC,EAAD,CAAWoG,MAAM,cACjB,kBAAC,EAAD,CAAkBhG,GAAG,WAAWyD,KAAK,OAAO0D,OAAQK,EACpDrB,UAAU,OAAOZ,MAAO5H,KAAKmC,MAAMC,eAG3C,yBAAKH,UAAU,OACX,yBAAKA,UAAU,uBACX,kBAAC,EAAD,CAAWoG,MAAM,SACjB,kBAAC,EAAD,CAAYhG,GAAG,OAAOyD,KAAK,OAAOuD,UAAU,UACxCP,QAAQ,2CAAwCN,UAAU,OAC1DZ,MAAO5H,KAAKmC,MAAMC,cAE1B,yBAAKH,UAAU,uBACX,kBAAC,EAAD,CAAWoG,MAAM,aACjB,kBAAC,EAAD,CAAYhG,GAAG,WAAWyD,KAAK,OAAOuD,UAAU,UAChDP,QAAQ,aAAYN,UAAU,OAAOZ,MAAO5H,KAAKmC,MAAMC,oB,GAtBvCE,aA8BlCuH,EAAiB,iBAAM,CACzB,8BACA,mEACA,yBACA,yBACA,qBACA,sCACA,wCACA,6BACA,qBACA,6BACA,gBACA,eACA,+BACA,gCACA,YACA,4BACA,8BACA,6BACA,oCACA,mBACA,4BACA,8BAA+B,kBAAmB,sBAAuB,cAAe,qBAAsB,iDAAkD,6BAA8B,WAAY,uBAAwB,0BC5CjNC,E,kDACjB,WAAY3H,GAAQ,IAAD,8BACf,cAAMA,IACDyF,MAAQ,IAAI7H,EACjB,EAAK6H,MAAMD,QAAQ,IAAIrE,EAAS,EAAKsE,MAAMG,SAC3C,EAAKQ,MAAQ,CACT/D,UAAW,EAAKuF,aAAa,EAAKnC,QALvB,E,mEAQImC,GACnB/J,KAAKgK,SAAS,CACVxF,UAAWuF,EAAa/J,KAAK4H,W,+BAI3B,IAAD,OACL,OACI,6BACI,yBAAK3F,UAAU,mBACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,8BACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYG,WAAYpC,KAAK4H,SAEjC,yBAAK3F,UAAU,YACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAkBX,WAAYtB,KAAK4H,MAAMsB,uBACzC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAoB9G,WAAYpC,KAAK4H,MACjCI,yBAA0B,kBAAM,EAAKiC,uBAAuB,EAAKF,qBAKrF,kBAAC,EAAD,CAAe3H,WAAYpC,KAAK4H,MAAOpD,UAAWxE,KAAKuI,MAAM/D,gB,mCAKhEoD,GACT,OACI,kBAAC,EAAD,CAAWzG,IAAK,uBAAwBkB,GAAI,uBAAwBD,WAAYwF,Q,GA1ClDtF,aCG3B4H,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7I,SAASC,eAAe,SDyHpB,kBAAmB6I,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.0ad9b3be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nconst printColumnMap = {};\nexport default class PrintTable {\n    constructor() {\n        this.printRows = new PrintRows();\n        this.printColumns = new PrintColumns();\n        this.inputMap = {};\n    }\n    pushRow(row) {\n        this.printRows.rows.push(row);\n    }\n    setCurrentRow(rowNo) {\n        this.printRows.currentRow = rowNo;\n    }\n    getCurrentRow() {\n        return this.printRows.getCurrentRow();\n    }\n    size() {\n        return this.printRows.rows.length;\n    }\n    createHeaderCellFor() {\n        return this.printColumns.columns.map(columnInfo => <HeaderCell\n            itemId={columnInfo.itemId} header={columnInfo.name} key={columnInfo.itemId} />)\n    }\n    createCellsFor(row) {\n        return this.printColumns.columns.map(columnInfo => <DataCell\n            itemId={columnInfo.itemId}\n            row={row} key={columnInfo.itemId}\n        />);\n    }\n    deleteRow(rowIndex) {\n        this.printRows.rows.splice(rowIndex, 1);\n    }\n    getGrandTotalValue() {\n        return this.printRows.grandTotal;\n    }\n    static generateCellId(itemId, rowSeq = 0) {\n        return itemId + '_cell_' + rowSeq;\n    }\n\n    setFieldsWithSelectedRow(rowIndex) {\n        const selectedRow = this.printRows.rows[rowIndex];\n        selectedRow.resetFeilds(this.inputMap);\n        this.setCurrentRow(selectedRow.sno);\n        for (const itemId in selectedRow) {\n            const item = document.getElementById(itemId);\n            if (item) {\n                item.value = selectedRow[itemId];\n            }\n\n        }\n    }\n}\nexport class PrintColumn {\n    constructor(name, className, itemId) {\n        this.name = name;\n        this.className = className;\n        this.itemId = itemId;\n        printColumnMap[itemId] = this;\n    }\n}\nexport class DataGroup extends Component {\n    render() {\n        this.rows = this.props.printTable.printRows.rows.map(row =>\n            <DataRow key={'dataRow' + row.sno} id={'dataRow' + row.sno} printTable={this.props.printTable} row={row} ></DataRow>);\n        return (\n            <div\n                id={this.props.id}\n                className='table-row-group'>\n                {this.rows}\n            </div>\n        );\n    }\n}\nclass DataRow extends Component {\n    render() {\n        const cells = this.props.printTable.createCellsFor(this.props.row);\n        return (\n            <div\n                id={this.props.id}\n                className='resp-table-row data-table-row'\n                title='Click on the row to edit !!!'\n                onClick={() => this.props.printTable.setFieldsWithSelectedRow(this.props.row.sno)} >\n                {cells}\n            </div>\n        );\n    }\n}\nclass DataCell extends Component {\n    render() {\n        const id = PrintTable.generateCellId(this.props.itemId, this.props.row.sno);\n        return (\n            <div id={id} className='table-body-cell'>\n                {this.props.row[this.props.itemId]}\n            </div>\n        )\n    }\n}\nclass HeaderCell extends Component {\n    render() {\n        const id = PrintTable.generateCellId(this.props.itemId);\n        return (\n            <div id={id} className='table-header-cell'>\n                {this.props.header}\n            </div>\n        )\n    }\n}\nexport class PrintColumns {\n    constructor() {\n        this.columns = [\n            new PrintColumn('S. No.', 'col-1', 'sno'),\n            new PrintColumn('Item Name', 'col-3', 'itemName'),\n            new PrintColumn('Rate', 'col-2', 'rate'),\n            new PrintColumn('Quantity', 'col-2', 'quantity'),\n            new PrintColumn('Total', 'col-2', 'total')\n        ];\n    }\n}\nexport class PrintRows {\n    constructor() {\n        this.rows = [];\n        this.currentRow = 1;\n    }\n    getCurrentRow() {\n        return this.rows[this.currentRow - 1];\n    }\n\n    getCurrentCellId(itemId) {\n        return itemId + '_cell_' + this.currentRow;\n    }\n\n    get grandTotal() {\n        return this.rows.map(row => parseFloat(row.total)).reduce((x, y) => x + y).toFixed(2);\n    }\n}\nexport class PrintRow {\n    constructor(index) {\n        this.itemName = '';\n        this.quantity = 0;\n        this._rate = '';\n        this.sumTotal = '';\n        this.sno = index + 1;\n    }\n    get total() {\n        this.sumTotal = this.rate * this.quantity;\n        return this.sumTotal.toFixed(2);\n    }\n    get index() {\n        return this.sno - 1;\n    }\n    get rate() {\n        let value = parseFloat(this._rate);\n        if (!value)\n            value = 0;\n        return value;\n    }\n    set rate(value) {\n        this._rate = parseFloat(value);\n    }\n    generateCellId(itemId) {\n        return itemId + '_cell_' + this.sno;\n    }\n    getCurrentCellId(itemId) {\n        return itemId + '_cell_' + this.sno;\n    }\n    resetFeilds(inputMap) {\n        Object.entries(this).forEach(entry => {\n            const itemId = entry[0];\n            const itemValue = entry[1];\n            const itemField = inputMap[itemId];\n            if (itemField) {\n                itemField.value = itemValue;\n            }\n        });\n\n    }\n}","import React, { Component } from 'react';\nimport './billContainer.css'\n\nexport default class BillContainer extends Component {\n    createHeaderRow() {\n        return this.props.printTable.createHeaderCellFor();\n    }\n    render() {\n        return (\n            <div className=\"row bill-container\">\n                <div className=\"col-sm-12 printable bill-info\" id=\"billInfo\">\n                    <div className='table' id=\"billInfoTable\">\n                        <div className=\"resp-table-header\">\n                            <div className=\"table-header-cell\">ONLINE SUVIDHA KENDRA</div>\n                        </div>\n                        <div className=\"resp-table-row\">\n                            <div className=\"table-body-cell\">\n                                <div className=\"row\">\n                                    <div className='col-sm-3' style={{ minWidth: \"80px\" }}>Customer /Shop Name:-\n                                </div>\n                                    <div className='col-sm-3' id=\"customerNamePrint\"></div>\n                                    <div className='offset-sm-2'>Voucher No:-</div>\n                                    <div className='col-sm-2' id=\"voucherNoPrint\"></div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className='col-sm-3' style={{ minWidth: \"80px\" }}>Customer /Shop Contact:-\n                                </div>\n                                    <div className='col-sm-3' id=\"customerContactPrint\"></div>\n                                    <div className='offset-sm-2'>Date:-</div>\n                                    <div className='col-sm-3' id=\"billDatePrint\"></div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"resp-table-row\">\n                            <div className=\"table-body-cell\">\n                                <div className=\"table\" id=\"printable\">\n                                    {this.createHeaderRow()}\n                                    {this.props.dataGroup}\n                                    <div className=\"resp-table-footer\">\n                                        <div className=\"table-body-cell\"></div>\n                                        <div className=\"table-body-cell\">Grand Total</div>\n                                        <div className=\"table-body-cell\"></div>\n                                        <div className=\"table-body-cell\"></div>\n                                        <div className=\"table-body-cell\" id=\"grandTotal\">0.00</div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"resp-table-footer\">\n                            <div className=\"table-footer-cell\">\n                                <div className=\"row\">\n                                    <div className='col-sm-9'>\n                                        Proprieter:- Neeraj Soni\n                                </div>\n                                    <div className='col-sm-9'>\n                                        Contact:- 9685168923, 9755665077\n                                </div>\n                                    <div className='col-sm-9'>\n                                        <div>Address:- Online Suvidha Kendra, Taxi Stand Semariya\n                                    </div>\n                                        <div> Jhagaraha Dist - Sidhi (M.P.)</div>\n                                    </div>\n                                    <div className='col-sm-3' style={{ textAlign: \"center\" }}>\n                                        ------------------\n                                </div>\n                                    <div className='col-sm-9'>\n                                        Pincode:- 486661\n                                </div>\n                                    <div className='col-sm-3' style={{ textAlign: \"center\" }}>\n                                        Signature\n                                </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class PrintUtility {\n\tstatic cells = {}\n\tstatic getDataGroup(parentId, row) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={parentId + 'DataGroup'}\n\t\t\t\tclassName='table-row-group'>\n\t\t\t\t{row}\n\t\t\t</div>\n\t\t);\n\t}\n\tstatic createHeaderRow() {\n\t\treturn (\n\t\t\t<div className='resp-table-header'>\n\t\t\t</div>\n\t\t);\n\t}\n\tstatic getFooterRow() {\n\t\treturn (\n\t\t\t<div className='resp-table-footer'>\n\t\t\t</div>\n\t\t);\n\t}\n\tstatic getGrandTotalRow() {\n\t\treturn (<div className='table'>\n\t\t\t<div className='resp-table-row'>\n\t\t\t\t<div className='table-body-cell'>\n\t\t\t\t\tGrand Total\n\t\t\t\t</div>\n\t\t\t\t<div id='grandTotal' className='table-body-cell'>\n\t\t\t\t\t0\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>);\n\t}\n\tstatic createTableRow(index, listener, cells) {\n\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tid={'dataRow' + index}\n\t\t\t\t\tclassName='resp-table-row data-table-row'\n\t\t\t\t\ttitle='Click on the row to edit !!!'\n\t\t\t\t\tonClick={listener}>\n\t\t\t\t\t{cells}\n\t\t\t\t</div>\n\t\t)\n\t}\n\tstatic getColumnName(itemId, name) {\n\t\treturn `${name}`;\n\t}\n\n\tstatic updatePrintItem(row, itemId, grandTotalValue) {\n\t\tconst cellId = row.getCurrentCellId(itemId);\n\t\tlet cell = document.getElementById(cellId);\n\t\tthis.highlightChangedElement(cell);\n\t\tcell.innerHTML = row[itemId];\n\t\tthis.updateSubTotal(row);\n\t\tthis.updateGrandTotal(grandTotalValue);\n\t}\n\n\tstatic updateSubTotal(row) {\n\t\tlet cellId = row.getCurrentCellId('total');\n\t\tlet cell = document.getElementById(cellId);\n\t\tthis.highlightChangedElement(cell);\n\t\tcell.innerHTML = row.total;\n\t}\n\tstatic updateGrandTotal(grandTotalValue) {\n\t\tconst grandTotal = document.getElementById('grandTotal');\n\t\tconst grandTotalFloating = document.getElementById('grandTotalFloating');\n\t\tthis.highlightChangedElement(grandTotal);\n\t\tgrandTotal.innerText = grandTotalValue;\n\t\tgrandTotalFloating.innerText = grandTotalValue;\n\t}\n\n\tstatic highlightChangedElement(element, timeout = 300) {\n\t\tconst oldColor = element.parentElement.style.backgroundColor;\n\t\telement.style.backgroundColor = '#FF0'\n\t\tsetTimeout(() => element.style.backgroundColor = oldColor, timeout);\n\n\t}\n\n\tstatic populatePrintHeader(element) {\n\t\tconst printHeaderId = element.id + 'Print';\n\t\tif (element.type === 'date') {\n\t\t\tdocument.getElementById(printHeaderId).innerText = new Date(element.value).toLocaleDateString()\n\t\t}\n\t\telse{\n\t\t\tdocument.getElementById(printHeaderId).innerText = element.value;\n\t\t}\n\n\t}\n\n}\n","import React, { Component } from 'react';\nimport PrintUtility from '../../modules/printUtility'\n\nexport default class PrintButton extends Component {\n\n    printTheTable = () => {\n        const printHeaderInputs = document.getElementsByClassName('print-header-input');\n        for (var i = 0; i < printHeaderInputs.length; i++) {\n            PrintUtility.populatePrintHeader(printHeaderInputs[i]);\n        }\n        const billInfo = document.getElementById('billInfo');\n        const customerCopy = billInfo.cloneNode(true);\n        const billInfoParent = billInfo.parentElement;\n        const original = billInfoParent.innerHTML;\n\n        const sellerDiv = document.createElement('div');\n        sellerDiv.classList.add('row');\n        sellerDiv.innerText = 'Seller Copy';\n        billInfo.insertBefore(sellerDiv, billInfo.firstChild);\n\n        const customerDiv = document.createElement('div');\n        customerDiv.classList.add('row');\n        customerDiv.innerText = 'Customer Copy';\n        customerCopy.insertBefore(customerDiv, customerCopy.firstChild);\n        billInfoParent.appendChild(customerCopy);\n        window.print();\n        window.onafterprint(() => {\n            console.log(\"Printing completed...\");\n            billInfoParent.innerHTML = original;\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"mt-1 text-center\" >\n                    <button className=\"btn btn-primary\" onClick={this.printTheTable}>\n                        <span className=\"display-4\">Print</span>\n                    </button>\n                </div >\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nexport default class GrandTotalSticky extends Component {\n\n    render() {\n        return (\n            <div className=\"bg-success text-center\">\n                <div className='col-sm-12 h4'>GRAND TOTAL\n                    <div className='col-sm-12'></div>\n                    <span className='badge badge-dark'\n                        id=\"grandTotalFloating\">{this.props.grandTotal}\n                    </span>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { PrintRow } from '../../modules/printTable';\n\nexport default class AddDeleteRowButton extends Component {\n    constructor(props) {\n        super(props);\n        this.table = props.printTable;\n    }\n    pushRow = (row) => {\n        this.table.pushRow(row);\n    }\n    setCurrentRow = (rowNo) => {\n        this.table.setCurrentRow(rowNo);\n    }\n    addNewItem = () => {\n        const newPrintRow = new PrintRow(this.table.size());\n        this.pushRow(newPrintRow);\n        this.setCurrentRow(newPrintRow.sno);\n        newPrintRow.resetFeilds(this.table.inputMap);\n        this.props.modifyTableEventListener();\n\n    };\n    deleteLastItem = () => {\n        const rowIndex = this.table.size() - 1;\n        if (rowIndex > 0) {\n            this.table.printRows.rows.pop();\n            this.props.modifyTableEventListener();\n            this.table.setFieldsWithSelectedRow(rowIndex - 1);\n        }\n        else {\n            alert(\"At least one row is required.\");\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"mt-1 text-center\">\n                    <button className=\"btn btn-primary\" onClick={this.addNewItem}>\n                        <span className=\"fa fa-plus\"></span>\n                        <span className=\"h5\">Add New Item</span>\n                    </button>\n                </div>\n                <div className=\"mt-1 text-center\">\n                    <button className=\"btn btn-primary\" onClick={this.deleteLastItem}>\n                        <span className=\"fa fa-remove\"></span>\n                        <span className=\"h5\">Delete Last Item</span>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}","import React,{ Component } from 'react';\n\nclass ItemLabel extends Component {\n    render(){\n        return (\n        <span className=\"badge badge-dark\"><label>{this.props.label}</label></span>\n        )\n    }\n}\n\nexport default ItemLabel","import React, { Component } from 'react';\nimport PrintUtility from '../../modules/printUtility'\nclass InputField extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.state.isItemVar = this.props.isItemVar === \"true\" ? true : false;\n        this.className = \"form-control\";\n        if (!this.state.isItemVar) {\n            this.className += \" print-header-input\";\n        }\n        this.handleOnInput = this.handleOnInput.bind(this);\n    }\n    handleOnInput(event) {\n        if (this.state.isItemVar) {\n           this.updatePrintObj(event.target);\n        }\n        else {\n            PrintUtility.populatePrintHeader(event.target);\n        }\n    }\n    updatePrintObj(element) {\n        const itemId = element.id;\n        const itemValue = typeof element.value === \"string\" ? element.value : parseFloat(element.value);\n        const pattern = element.pattern;\n        let test = true;\n        const table = this.props.table;\n        const currentRow = table.getCurrentRow();\n        if(pattern){\n            test = RegExp(pattern).test(itemValue);\n        }\n        if(test){\n            currentRow[itemId] = itemValue;\n            \n            PrintUtility.updatePrintItem(currentRow, itemId, table.getGrandTotalValue());\n        }\n        else{\n            element.value = currentRow[itemId];\n        }\n        \n    }\n    render() {\n        return (\n            <input className={this.className}\n                id={this.props.id}\n                type={this.props.type}\n                onInput={this.handleOnInput}\n                inputMode={this.props.inputmode}\n                pattern={this.props.pattern}\n                value={this.state.value} />\n        )\n    }\n}\n\nexport class LookupInputField extends InputField {\n\n    render() {\n        this.state.data = []\n        if (typeof this.props.lookup == 'function') {\n            this.state.data = this.props.lookup();\n        }\n        return (\n            <div>\n                <input className=\"form-control\"\n                    id={this.props.id}\n                    type={this.props.type}\n                    onInput={this.handleOnInput}\n                    inputMode={this.props.inputmode}\n                    pattern={this.props.pattern}\n                    list=\"itemNames\"\n                    value={this.state.value} />\n                <datalist id=\"itemNames\" defaultValue=\"\">\n                    <option value=\"\">select</option>\n                    {\n                        this.state.data.map(\n                            (itemValue) => <option key={itemValue} value={itemValue} />\n                        )}\n                </datalist>\n            </div>\n        )\n    }\n}\nexport default InputField","import React, { Component } from 'react'\nimport ItemLabel from './itemLabel'\nimport InputField from './itemField'\nexport default class HeaderInputs extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"form-group col-sm-6\">\n                        <ItemLabel label='Customer /Shop Name' />\n                        <InputField id=\"customerName\" type=\"text\" />\n                    </div>\n                    <div className=\"form-group col-sm-6\">\n                        <ItemLabel label='Cust /Shop Contact' />\n                        <InputField id=\"customerContact\" type=\"number\" />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"form-group col-sm-6\">\n                        <ItemLabel label='Voucher No.' />\n                        <InputField id=\"voucherNo\" type=\"number\" />\n                    </div>\n                    <div className=\"form-group col-sm-6\">\n                        <ItemLabel label='Date' />\n                        <InputField id=\"billDate\" type=\"date\" />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport ItemLabel from './itemLabel'\nimport InputField, { LookupInputField } from './itemField'\nexport default class DataInputs extends Component {\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"form-group col-sm-12\">\n                        <ItemLabel label='Item Name' />\n                        <LookupInputField id=\"itemName\" type=\"text\" lookup={getListedItems} \n                        isItemVar=\"true\" table={this.props.printTable} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"form-group col-sm-6\">\n                        <ItemLabel label='Rate' />\n                        <InputField id=\"rate\" type=\"text\" inputmode=\"numeric\"\n                            pattern=\"^\\d{0,5}(?:\\.{0,1})(?:\\d{1,2}){0,1}?$\" isItemVar=\"true\" \n                            table={this.props.printTable} />\n                    </div>\n                    <div className=\"form-group col-sm-6\">\n                        <ItemLabel label='Quantity' />\n                        <InputField id=\"quantity\" type=\"text\" inputmode=\"numeric\" \n                        pattern=\"^\\d{0,5}$\" isItemVar=\"true\" table={this.props.printTable} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst getListedItems = () => [\n    \"Samagra scholarship mapping\",\n    \"Samagra scholarship profile updation and u dise profile updation\",\n    \"Mapping list print out\",\n    \"Feeding list print out\",\n    \"Proposal print out\",\n    \"M 1 click successful list print out\",\n    \"M 1 click unsussessful list print out\",\n    \"Inspire award registration\",\n    \"Circular print out\",\n    \"Typing works and print out\",\n    \"Unmap student\",\n    \"TC print out\",\n    \"Account updation of students\",\n    \"Class updation 1A of students\",\n    \"Photocopy\",\n    \"Other works and print out\",\n    \"Salary Excelsheet print out\",\n    \"MER updation and print out\",\n    \"Uniform excel sheet and print out\",\n    \"NMMS FORM ONLINE\",\n    \"NMMS Admit card Print out\",\n    'Excel sheet/word sheet list', 'NSP PORTAL WORK', 'Email and print out', 'Online form', 'Scanning documents', 'Typing order/application/invitation card/other', 'Ramsa work/ramsa print out', 'RTE FORM', 'Exam paper print out', 'Model paper print out'\n];\n","import React, { Component } from 'react'\nimport PrintTable, { PrintRow, DataGroup } from '../../modules/printTable'\nimport BillContainer from './billContainer'\nimport PrintButton from './printButton'\nimport GrandTotalSticky from './grandTotalSticky'\nimport './index.css'\nimport './print.css'\nimport AddDeleteRowButton from './addDeleteRowButton'\nimport HeaderInputs from './headerInputs'\nimport DataInputs from './dataInputs'\n\nexport default class SimpleBiller extends Component {\n    constructor(props) {\n        super(props)\n        this.table = new PrintTable()\n        this.table.pushRow(new PrintRow(this.table.size()))\n        this.state = {\n            dataGroup: this.getDataGroup(this.table)\n        }\n    }\n    handleTableModifyEvent(getDataGroup) {\n        this.setState({\n            dataGroup: getDataGroup(this.table)\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container  mt-2\">\n                    <div className=\"row card non-printable\">\n                        <div className=\"col-sm-12 row\">\n                            <div className=\"col-sm-9 card-body rounded\">\n                                <HeaderInputs />\n                                <DataInputs printTable={this.table}/>\n                            </div>\n                            <div className=\"col-sm-3\">\n                                <div className=\"sticky-top\">\n                                    <GrandTotalSticky grandTotal={this.table.getGrandTotalValue()} />\n                                    <PrintButton />\n                                    <AddDeleteRowButton printTable={this.table}\n                                        modifyTableEventListener={() => this.handleTableModifyEvent(this.getDataGroup)} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <BillContainer printTable={this.table} dataGroup={this.state.dataGroup} />\n                </div>\n            </div>\n        )\n    };\n    getDataGroup(table) {\n        return (\n            <DataGroup key={'PrintTable_DataGroup'} id={'PrintTable_DataGroup'} printTable={table} />\n        );\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n//COMPONENTS\nimport SimpleBiller from './components/simpleBiller'\nfunction App() {\n  return (\n    <div>\n      <SimpleBiller></SimpleBiller>\n    </div>\n  );\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}